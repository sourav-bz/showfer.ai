/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 public/models/1e_Character.gltf -o src/app/_ui/Characters/ConradTT.tsx -r public 
*/
// @ts-nocheck

import * as THREE from "three";
import React, { useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Cube001: THREE.Mesh;
    Cube001_1: THREE.Mesh;
  };
  materials: {
    Character_1st_Baked: THREE.MeshStandardMaterial;
    Material: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

export function ConradTT(props) {
  const { nodes, materials } = useGLTF(
    "/models/1e_Character.gltf"
  ) as GLTFResult;

  // useEffect(() => {
  //   if (!props.storyState) return;

  //   let animationFrameId;
  //   let talkValue = 0;

  //   const animateTalk = () => {
  //     if (props.storyState === "assistant") {
  //       // Toggle between 0 and 1
  //       talkValue = talkValue === 0 ? 1 : 0;

  //       nodes.Character_1st.morphTargetInfluences[
  //         nodes.Character_1st.morphTargetDictionary["Happy_Talk"]
  //       ] = talkValue;

  //       // Request next frame after a delay to control the speed of the animation
  //       animationFrameId = setTimeout(() => {
  //         requestAnimationFrame(animateTalk);
  //       }, 250); // Adjust this value to change the speed of the mouth movement
  //     }
  //   };

  //   animateTalk();

  //   return () => {
  //     if (animationFrameId) {
  //       clearTimeout(animationFrameId);
  //     }
  //   };
  // }, [props.storyState, nodes.Character_1st]);

  // useEffect(() => {
  //   console.log(
  //     "shape keys dictionary 1c",
  //     nodes.Character_1st.morphTargetDictionary
  //   );
  //   console.log(
  //     "shape keys influences 1c",
  //     nodes.Character_1st.morphTargetInfluences
  //   );

  //   nodes.Character_1st.morphTargetInfluences[
  //     nodes.Character_1st.morphTargetDictionary["Default_Pose"]
  //   ] = 1;
  //   nodes.Character_1st.morphTargetInfluences[8] = 1;
  //   // nodes.Character_1st.morphTargetInfluences[0] = 1
  //   // nodes.Character_1st.morphTargetInfluences[4] = 1
  // }, []);

  return (
    <group {...props} dispose={null}>
      <mesh
        name="Cube001"
        geometry={nodes.Cube001.geometry}
        material={materials.Character_1st_Baked}
        morphTargetDictionary={nodes.Cube001.morphTargetDictionary}
        morphTargetInfluences={nodes.Cube001.morphTargetInfluences}
      />
      <mesh
        name="Cube001_1"
        geometry={nodes.Cube001_1.geometry}
        material={materials.Material}
        morphTargetDictionary={nodes.Cube001_1.morphTargetDictionary}
        morphTargetInfluences={nodes.Cube001_1.morphTargetInfluences}
      />
    </group>
  );
}

useGLTF.preload("/models/1e_Character.gltf");
